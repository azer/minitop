#!/bin/bash
#
# minitop - Minimal system monitoring tool
# Version: 1.0.0
# Author: Azer Ko√ßulu <azerkoculu@gmail.com>

VERSION="1.0.0"

# Show help [same help function as before...]
show_help() {
    cat << EOF
minitop - Minimal system monitoring tool v${VERSION}

USAGE:
    minitop [OPTIONS]

OPTIONS:
    -h, --help     Show this help message
    -v, --version  Show version

DISPLAY:
    CPU            CPU usage percentage
    RAM            Memory usage percentage
    SWAP           Swap usage percentage
    DISK           Disk usage percentage
    LOAD           System load percentage
    TCP            TCP connections count
    FD             File descriptor count
    PROCS          Total process count
    HIGH CPU       Top 3 CPU-consuming processes
    HIGH MEM       Top 3 memory-consuming processes
    GPU            GPU metrics (if available)

COLORS:
    Green          OK (0-70%)
    Yellow         Warning (71-90%)
    Red            Critical (>90%)

SHORTCUTS:
    Q, Esc         Exit minitop
EOF
    exit 0
}

# Show version
show_version() {
    echo "minitop v${VERSION}"
    exit 0
}

# Parse arguments
case "$1" in
    -h|--help)
        show_help
        ;;
    -v|--version)
        show_version
        ;;
esac

# Colors and setup
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

tput civis
trap 'tput cnorm; stty echo icanon; exit' INT TERM EXIT
stty -icanon -echo
clear

get_status() {
    value=$1
    if [ $value -gt 90 ]; then
        echo -e "${RED}CRITICAL${NC}"
    elif [ $value -gt 70 ]; then
        echo -e "${YELLOW}WARNING${NC}"
    else
        echo -e "${GREEN}OK${NC}"
    fi
}

shorten_path() {
    echo "$1" | sed "s|$HOME|~|" | rev | cut -d'/' -f1 | rev
}

# Print static system info once
hostname=$(hostname)
kernel=$(uname -r)
uptime=$(uptime -p)
printf "Host: %s (%s)\n" "$hostname" "$kernel"
printf "Up: %s\n" "$uptime"
echo "---"
# Define format for metrics
printf "%-12s %-8s %s\n" "CPU" "" ""
printf "%-12s %-8s %s\n" "RAM" "" ""
printf "%-12s %-8s %s\n" "SWAP" "" ""
printf "%-12s %-8s %s\n" "DISK" "" ""
printf "%-12s %-8s %s\n" "LOAD" "" ""
printf "%-12s %-8s %s\n" "TCP" "" ""
printf "%-12s %-8s %s\n" "FD" "" ""
printf "%-12s %-8s %s\n" "PROCS" "" ""
printf "%-12s %s\n" "HIGH CPU" ""
printf "%-12s %s\n" "HIGH MEM" ""
printf "%-12s %-8s %s\n" "GPU" "" ""

while true; do
    # Check for keyboard input
    read -t 0.5 -n 1 key 2>/dev/null
    if [[ $key = "q" ]] || [[ $key = "Q" ]] || [[ $key = $'\e' ]]; then
        exit 0
    fi

    # Move cursor after static info
    tput cup 2 0
    echo "---"

    # System metrics
    cpu=$(top -bn1 | grep "Cpu(s)" | awk '{print int($2)}')
    ram=$(free | grep Mem | awk '{print int($3/$2 * 100)}')
    swap=$(free | grep Swap | awk '{ if($2 > 0) print int($3/$2 * 100); else print 0 }')
    disk=$(df / | tail -1 | awk '{print int($5)}')
    load=$(uptime | awk -F'[a-z]: ' '{print int($2)}' | cut -d. -f1)
    tcp=$(ss -s | awk '/TCP:/ {print $2}')
    fd=$(lsof | wc -l)
    procs=$(ps aux | wc -l)

    # Get top processes
    high_cpu=$(ps aux --sort=-%cpu | head -4 | tail -3 | awk '{print $11" "$3}' | while read proc cpu; do
        printf "%s %.1f%%, " "$(shorten_path "$proc")" "$cpu"
    done | sed 's/, $//')

    high_mem=$(ps aux --sort=-%mem | head -4 | tail -3 | awk '{print $11" "$4}' | while read proc mem; do
        printf "%s %.1f%%, " "$(shorten_path "$proc")" "$mem"
    done | sed 's/, $//')

    # Print aligned metrics
    # For metrics with percentages, use %2d to ensure 2-digit width
printf "%-12s %-8s %2d%%\n" "CPU" "$(get_status $cpu)" $cpu
printf "%-12s %-8s %2d%%\n" "RAM" "$(get_status $ram)" $ram
printf "%-12s %-8s %2d%%\n" "SWAP" "$(get_status $swap)" $swap
printf "%-12s %-8s %2d%%\n" "DISK" "$(get_status $disk)" $disk
printf "%-12s %-8s %2d%%\n" "LOAD" "$(get_status $load)" $load
    printf "%-12s %-8s %d\n" "TCP" "$(if [ $tcp -gt 1000 ]; then echo -e "${YELLOW}HIGH${NC}"; else echo -e "${GREEN}OK${NC}"; fi)" $tcp
    printf "%-12s %-8s %d\n" "FD" "$(if [ $fd -gt 32768 ]; then echo -e "${YELLOW}HIGH${NC}"; else echo -e "${GREEN}OK${NC}"; fi)" $fd
    printf "%-12s %-8s %d\n" "PROCS" "$(if [ $procs -gt 300 ]; then echo -e "${YELLOW}HIGH${NC}"; else echo -e "${GREEN}OK${NC}"; fi)" $procs
    printf "%-12s %s\n" "HIGH CPU" "$high_cpu"
    printf "%-12s %s\n" "HIGH MEM" "$high_mem"

    if command -v nvidia-smi &> /dev/null; then
    # Get GPU memory usage
    mem_used=$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits)
    mem_total=$(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits)
    mem_percent=$((mem_used * 100 / mem_total))

    # Get GPU utilization
    gpu_util=$(nvidia-smi --query-gpu=utilization.gpu --format=csv,noheader,nounits)

    # Get GPU process info (name and memory usage)
    gpu_process=$(nvidia-smi --query-compute-apps=pid,name,used_memory --format=csv,noheader | head -n1)
    if [ ! -z "$gpu_process" ]; then
        process_name=$(echo $gpu_process | cut -d',' -f2 | xargs basename)
        process_mem=$(echo $gpu_process | cut -d',' -f3 | tr -d ' MiB')
    else
        process_name="None"
        process_mem="0"
    fi

    # Print GPU metrics with status colors
    printf "%-12s %-8s %d%% (%dMiB/%dMiB)\n" "GPU MEM" "$(get_status $mem_percent)" $mem_percent $mem_used $mem_total
    printf "%-12s %-8s %d%%\n" "GPU UTIL" "$(get_status $gpu_util)" $gpu_util
    printf "%-12s %s (%dMiB)\n" "GPU PROC" "$process_name" $process_mem
else
    printf "%-12s %s\n" "GPU" "None"
fi

    sleep 0.5
done
